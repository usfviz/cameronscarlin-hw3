DuplicateBDays <- DuplicateBDays + 1
}
}
print(paste(n,"people with at least 2 with common bdays has a probability of",DuplicateBDays/10000))
}
for (n in 2:20){
DuplicateBDays <- 0
for (i in 1:10000){
BDays <- sample(DaysOfYear, n, replace=T)
if (TRUE %in% duplicated(BDays)){
DuplicateBDays <- DuplicateBDays + 1
}
}
print(paste(n,"people with at least 2 with common bdays has a probability of",DuplicateBDays/10000))
}
for (n in 2:30){
DuplicateBDays <- 0
for (i in 1:10000){
BDays <- sample(DaysOfYear, n, replace=T)
if (TRUE %in% duplicated(BDays)){
DuplicateBDays <- DuplicateBDays + 1
}
}
print(paste(n,"people with at least 2 with common bdays has a probability of",DuplicateBDays/10000))
}
for (n in 2:25){
DuplicateBDays <- 0
for (i in 1:10000){
BDays <- sample(DaysOfYear, n, replace=T)
if (TRUE %in% duplicated(BDays)){
DuplicateBDays <- DuplicateBDays + 1
}
}
print(paste(n,"people with at least 2 with common bdays has a probability of",DuplicateBDays/10000))
}
TwoB <- function(N){
X <- (1/N)*(1/100)*(99/100)**(N-1)
}
print(TwoB(5))
for i in range(203:1000){
val <- val + TwoB(i)
}
print(val)
val <- 0
for i in range(203,1000){
val <- val + TwoB(i)
}
print(val)
for (i in c(203:1000)){
val <- val + TwoB(i)
}
print(val)
c(203:1000)
for (i in c(203:10000)){
val <- val + TwoB(i)
print i
}
print(val)
for (i in c(203:10000)){
val <- val + TwoB(i)
print(i)
}
for (i in c(203:10000)){
val <- val + TwoB(i)
}
print(val)
for (i in c(203:100000)){
val <- val + TwoB(i)
}
print(val)
val <- 0
for (i in c(203:1000000)){
val <- val + TwoB(i)
}
print(val)
1/val
(.99**202)/.01
(2125.361/100)*(.99**202)/.01
TwoBVar <- function(N){
2125.36*(1/100)*(1/N)*(99/100)**(N-1)*(N-279.09)**2
}
var2b <- 0
for (i in c(203:100000)){
var2b <- var2b + TwoBVar(i)
}
print(sqrt(var2b))
var2b <- 0
for (i in c(203:100000)){
var2b <- var2b + TwoBVar(i)
}
print(var2b)
shiny::runApp('MSAN/MSAN-DataViz/lab2/class-code/intro-shiny/interactive-app-2')
install.packages(c("cluster", "curl", "DBI", "directlabels", "expm", "ks", "lattice", "mvtnorm", "openxlsx", "pbkrtest", "psych", "RcppEigen", "readr", "rgl", "rmarkdown", "scatterplot3d", "shiny", "sourcetools", "SparseM", "stringi", "survival", "tibble", "viridis"))
[1,2,3]
r_gamma_1a <- rgamma(10000,238,scale=1/10)
mean(r_gamma_1a) # pretty close to sample mean
fatal <- read.csv('fatal.csv')
sample_mean_1a <- mean(fatal$fatal_accidents)
r_gamma_1a <- rgamma(10000,238,rate=10)
mean(r_gamma_1a) # pretty close to sample mean
r_poiss_1a <- rpois(10000,r_gamma_1a)
r_poiss_1a <- sort(r_poiss_1a)
r_poiss_1a[250]
r_poiss_1a[9751]
miles <- (fatal$passenger_deaths/fatal$death_rate)
miles <- (fatal$passenger_deaths/fatal$death_rate)*100000000
miles <- (fatal$fatal_accidents/fatal$death_rate)*100000000
miles
miles <- (fatal$passenger_deaths/fatal$death_rate)*100000000
xbar <- mean(miles)
xbar
r_gamma_1b <- rgamma(10000, 238, rate = 10*xbar)
r_poiss_1b <- rpois(10000, r_gamma_1b*8*10^12)
r_poiss_1b <- rpois(10000, r_gamma_1b*8*10^11)
r_poiss_1b <- sort(r_poiss_1b)
r_poiss_1b[250]
r_poiss_1b[9750]
mean_deaths <- mean(fatal$passenger_deaths)
r_gamma_1c <- rgamma(10000,6919,rate=10)
r_poiss_1c <- rpois(10000,r_gamma_1c)
r_poiss_1c <- sort(r_poiss_1c)
r_poiss_1c[250]
r r_poiss_1c[9751]
r_poiss_1c[9751]
r_gamma_1d <- rgamma(10000, 6919, rate = 10*xbar)
r_poiss_1d <- rpois(10000, r_gamma_1d*8*10^11)
r_poiss_1d <- sort(r_poiss_1d)
shiny::runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('riot/League_Viz')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
library("maps")
install.packages('maps')
library("ggplot2")
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- reshape2::melt(crimes, id = 1)
states <- map_data("state")
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
choro <- merge(states, arrests, sort = FALSE, by = "region")
choro <- choro[order(choro$order), ]
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
library("mapproj")
install.packages('mapproj')
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- reshape2::melt(crimes, id = 1)
states <- map_data("state")
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
choro <- merge(states, arrests, sort = FALSE, by = "region")
choro <- choro[order(choro$order), ]
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
View(crimes)
View(crimesm)
View(states)
library("maps")
library("ggplot2")
library("mapproj")
states <- map_data("state", region='california')
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
choro <- merge(states, arrests, sort = FALSE, by = "region")
choro <- choro[order(choro$order), ]
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
View(choro)
states <- map_data("county", region='california')
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
choro <- merge(states, arrests, sort = FALSE, by = "region")
choro <- choro[order(choro$order), ]
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = group, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
choro <- merge(states, arrests, sort = FALSE, by = "subregion")
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- reshape2::melt(crimes, id = 1)
states <- map_data("county", region='california')
arrests <- USArrests
names(arrests) <- tolower(names(arrests))
arrests$region <- tolower(rownames(USArrests))
choro <- merge(states, arrests, sort = FALSE, by = "region")
View(states)
View(arrests)
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = subregion, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
View(choro)
View(choro)
View(arrests)
View(choro)
ggplot(choro, aes(long, lat, group=subregion)) +
geom_polygon(aes(group = subregion, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
ggplot(choro, aes(long, lat, group=region)) +
geom_polygon(aes(group = subregion, fill = assault)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
ggplot(choro, aes(long, lat, group=region)) +
geom_polygon(aes(group = subregion, fill = sum(group))) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
ggplot(choro, aes(long, lat, group=region)) +
geom_polygon(aes(group = subregion, fill = order)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
ggplot(choro, aes(long, lat)) +
geom_polygon(aes(group = subregion, fill = order)) +
coord_map("albers",  at0 = 45.5, lat1 = 29.5)
sum(choro$group)/choro$group
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
runApp('MSAN/MSAN-DataViz/InclassLabs/lab3/sfschools')
facebook <- read.csv('dataset_Facebook.csv')
setwd("~/MSAN/MSAN-DataViz/HW3/facebook_viz")
facebook <- read.csv('dataset_Facebook.csv')
View(facebook)
facebook <- read.csv('dataset_Facebook.csv',sep=';')
library(GGally)
ggparcoord(facebook, c(7:11), groupColumn = Type)
ggparcoord(facebook, c(7:11), groupColumn = 'Type')
ggparcoord(facebook, c(8:11), groupColumn = 'Type')
ggparcoord(facebook, c(8:11), groupColumn = 'Type', scale=NULL)
ggparcoord(facebook, c(8:11), groupColumn = 'Type', scale='robust')
ggparcoord(facebook, c(8:11), groupColumn = 'Type', scale='globalminmax')
ggparcoord(facebook, c(8:11), groupColumn = 'Type', scale='uniminmax')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='minmax')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='std')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='robust')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='center')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='uniminmax')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='center')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='centerObs')
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax')
library(plotly)
plotly(ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax'))
ggplotly(ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax'))
ggplotly(ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type'))
ggplotly(ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
theme(
axis.text.x = element_blank()
))
ggplotly(ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
theme(
axis.label.x = element_blank()
))
ggplotly(ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
theme(
))
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)
)
library(scales)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9","#999999"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#0000ee", "#oooobb","#999999","#3b62ce"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#0000ee", "#0000bb","#3b62ce"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#0000ee", "#708fae","#3b62ce"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#ccccff", "#708fae","#3b62ce"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#b2b2ff", "#708fae","#3b62ce"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type', xlab='')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#b2b2ff", "#708fae","#3b62ce"))
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_color_manual(values=c("#00a3b2", "#b2b2ff", "#708fae","#3b62ce"))+
theme(
axis.title.x = element_blank()
)
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
ylab("Count")+
scale_color_manual(values=c("#00a3b2", "#b2b2ff", "#708fae","#3b62ce"))+
theme(
axis.title.x = element_blank(),
axis.title.y = element_text()
)
)
ggplotly(
ggparcoord(facebook, c(16:19), groupColumn = 'Type', scale='globalminmax', title = 'Social Media Interactions by Post Type')+
scale_y_continuous(labels=comma)+
scale_x_discrete(labels=c('Comment','Like','Share','Total Interactions'))+
ylab("Count")+
scale_color_manual(values=c("#00a3b2", "#b2b2ff", "#708fae","#3b62ce"))+
theme(
axis.title.x = element_blank(),
axis.title.y = element_text()
)
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Total.Interactions))+geom_tile()
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+geom_tile()
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()+
scale_x_discrete()
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()+
scale_x_discrete(c(1:12))
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()
facebook$Post.Month <- as.factor(facebook$Post.Month)
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()
facebook$Post.Weekday <- as.factor(facebook$Post.Weekday)
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()
facebook$Post.Hour <- as.factor(facebook$Post.Hour)
ggplot(facebook, aes(x=Post.Hour, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()
ggplot(facebook, aes(x=Post.Month, y=Post.Hour, fill=Lifetime.Post.Total.Reach))+
geom_tile()
ggplot(facebook, aes(x=Post.Month, y=Post.Weekday, fill=Lifetime.Post.Total.Reach))+
geom_tile()
ggplot(facebook,
aes(x=Post.Month, y=Post.Weekday,
fill=Lifetime.Post.Total.Reach),
title='Month and Weekday Interactions')+
geom_tile()
ggplot(facebook,
aes(x=Post.Month, y=Post.Weekday,
fill=Lifetime.Post.Total.Reach))+
geom_tile()+
ggtitle('Month and Weekday Interactions')
plotly(ggplot(facebook,
aes(x=Post.Month, y=Post.Weekday,
fill=Lifetime.Post.Total.Reach))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Post.Month, y=Post.Weekday,
fill=Lifetime.Post.Total.Reach))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday,
fill=Lifetime.Post.Total.Reach))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday,
fill=sum(Lifetime.Post.Total.Reach)))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday,
fill=count(Lifetime.Post.Total.Reach)))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday,
fill=mean(Lifetime.Post.Total.Reach)))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday,
fill=Lifetime.Post.Total.Reach))+
geom_tile()+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday))+
geom_tile(fill=Lifetime.Post.Total.Reach)+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday))+
geom_tile(aes(fill=Lifetime.Post.Total.Reach))+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday))+
geom_tile(aes(fill=max(Lifetime.Post.Total.Reach)))+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday))+
geom_tile(aes(fill=Lifetime.Post.Total.Reach)+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday))+
geom_tile(aes(fill=Lifetime.Post.Total.Reach))+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(facebook,
aes(x=Type, y=Post.Weekday))+
geom_tile(aes(fill=Lifetime.Post.Total.Reach))+
ggtitle('Month and Weekday Interactions'))
facebookReshape <- count(facebook, Post.Month, Post.Weekday)
facebookReshape <- count(facebook, facebook$Post.Month, facebook$Post.Weekday)
count(facebook, category)
group_by(facebook,Type)
tally(group_by(facebook,Type))
library(dplyr)
tally(group_by(facebook,Type))
tally(group_by(facebook,Post.Month,Post.Weekday))
fb.count <- tally(group_by(facebook,Post.Month,Post.Weekday))
ggplotly(ggplot(fb.count,
aes(x=Post.Month, y=Post.Weekday))+
geom_tile(aes(fill=n))+
ggtitle('Month and Weekday Interactions'))
fb.count <- tally(group_by(facebook,Post.Hour,Post.Weekday))
ggplotly(ggplot(fb.count,
aes(x=Post.Month, y=Post.Weekday))+
geom_tile(aes(fill=n))+
ggtitle('Month and Weekday Interactions'))
ggplotly(ggplot(fb.count,
aes(x=Post.Hour, y=Post.Weekday))+
geom_tile(aes(fill=n))+
ggtitle('Month and Weekday Interactions'))
fb.count <- tally(group_by(facebook,Post.Month,Post.Weekday))
ggplotly(ggplot(fb.count,
aes(x=Post.Hour, y=Post.Weekday))+
geom_tile(aes(fill=n))+
ggtitle('Month and Weekday Interactions'))
fb.count <- tally(group_by(facebook,Post.Month,Post.Weekday))
ggplotly(ggplot(fb.count,
aes(x=Post.Month, y=Post.Weekday))+
geom_tile(aes(fill=n))+
ggtitle('Month and Weekday Interactions'))
runApp()
